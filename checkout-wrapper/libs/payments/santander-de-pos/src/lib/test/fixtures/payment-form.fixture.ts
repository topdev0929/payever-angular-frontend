import {
  FormValue, GuarantorRelation,
  PersonTypeEnum, WeekOfDelivery,
} from '@pe/checkout/santander-de-pos/shared';
import { cloneDeep } from '@pe/checkout/utils';

export const paymentFormFixture: () => FormValue = () => cloneDeep<FormValue>({
  ratesForm: {
    _rate: {
      'amount': 5000,
      'annualPercentageRate': 0,
      'dateOfFirstInstalment': '2024-07-15',
      'duration': 12,
      'interest': 0,
      'interestRate': 34.699,
      'lastMonthPayment': -500,
      'monthlyPayment': 500,
      'specificData': {
        'firstInstalment': 500,
        'processingFee': 0,
        'rsvTariff': null,
        'rsvTotal': 0,
      },
      'totalCreditCost': 5000,
    },
    creditDurationInMonths: 12,
    desiredInstalment: 100,
    _desiredInstalmentView: 100,
  },
  detailsForm: {
    commodityGroup: 'commodityGroup',
    condition: 'condition-key-01',
    _condition_view: '_condition_view',
    _program_view: '_program_view',
    customer: {
      profession: 'profession',
      personalDateOfBirth: new Date(2023, 2, 1),
    },
    typeOfGuarantorRelation: GuarantorRelation.OTHER_HOUSEHOLD,
    weekOfDelivery: 'weekOfDelivery',
    _weekOfDelivery_view: WeekOfDelivery.NEXT_WEEK,
    _customWeekOfDelivery_view: '2023-01-01',
    dayOfFirstInstalment: 100,
    downPayment: 100,
    _downPayment_view: 100,
    _enableDesiredInstalment: true,
  },
  termsForm: {
    forOwnAccount: true,
    _borrowerAgreeToBeAdvised: true,
    dataPrivacy: true,
    _agreeToBeAdvised: true,
    advertisementConsent: true,
    customerConditionsAccepted: true,
    webIdConditionsAccepted: true,
  },
  billingAddress: {
    id: 100,
    city: 'city',
    country: 'country',
    organizationName: 'organizationName',
    email: 'email',
    firstName: 'firstName',
    fullAddress: 'fullAddress',
    lastName: 'lastName',
    phone: 100,
    salutation: 'salutation',
    street: 'street',
    streetName: 'streetName',
    streetNumber: 'streetNumber',
    socialSecurityNumber: 'socialSecurityNumber',
    zipCode: 'zipCode',
  },
  [PersonTypeEnum.Customer]: {
    _identifyForm: {
      typeOfIdentification: 'typeOfIdentification',
      identificationNumber: 'identificationNumber',
      identificationPlaceOfIssue: 'identificationPlaceOfIssue',
      identificationDateOfIssue: new Date(2023, 2, 1),
      identificationDateOfExpiry: new Date(2023, 2, 1),
      identificationIssuingAuthority: 'identificationIssuingAuthority',
      personalDateOfBirth: new Date(2023, 2, 1),
      personalNationality: 'personalNationality',
      personalPlaceOfBirth: 'personalPlaceOfBirth',
      personalBirthName: 'personalBirthName',
      _idPassed: true,
      _docsMarkAsUploaded: false,
      _docsOtherType: 'registrationCertificate',
    },
    addressForm: {
      city: 'city',
      country: 'country',
      email: 'email',
      firstName: 'firstName',
      fullAddress: 'fullAddress',
      lastName: 'lastName',
      salutation: 'salutation',
      street: 'street',
      streetName: 'streetName',
      streetNumber: 'streetNumber',
      zipCode: 'zipCode',
    },
    employmentForm: {
      employer: 'employer',
      employedSince: new Date(2023, 2, 1),
      _isTemporaryUntil: true,
      temporaryEmployedUntil: new Date(2023, 2, 1),
    },
    incomeForm: {
      netIncome: 100,
      partnerIncomeNet: 100,
      otherIncomeFromHousehold: 100,
      typeOfResident: 100,
      incomeFromRent: 100,
      housingCosts: 100,
      supportPayment: 100,
      incomeInfo: 'test',
    },
    bankForm: {
      bankIBAN: 'bankIBAN',
      bankBIC: 'bankBIC',
    },
    protectionForm: {
      _yes: true,
      _no: false,
      dataForwardingRsv: true,
      creditProtectionInsurance: true,
    },
    personalForm: {
      personalMaritalStatus: 'personalMaritalStatus',
      profession: 'profession',
      addressMobilePhoneNumber: 'addressMobilePhoneNumber',
      addressPhoneNumber: 'addressPhoneNumber',
      addressResidentSince: new Date(2023, 2, 1),
      numberOfChildren: 100,
      typeOfIdentification: 'typeOfIdentification',
      identificationNumber: 'identificationNumber',
      identificationPlaceOfIssue: 'identificationPlaceOfIssue',
      identificationDateOfIssue: new Date(2023, 2, 1),
      identificationDateOfExpiry: new Date(2023, 2, 1),
      identificationIssuingAuthority: 'identificationIssuingAuthority',
      personalDateOfBirth: new Date(2023, 2, 1),
      personalNationality: 'personalNationality',
      personalPlaceOfBirth: 'personalPlaceOfBirth',
      personalBirthName: 'personalBirthName',
      _idPassed: true,
      _docsMarkAsUploaded: false,
      _docsOtherType: 'registrationCertificate',
    },
    prevAddressForm: {
      prevAddressResidentSince: new Date(2023, 0, 0),
      prevAddressCountry: 'prevAddressCountry',
      prevAddressCity: 'prevAddressCity',
      prevAddressZip: 'prevAddressZip',
      prevAddressStreet: 'prevAddressStreet',
      prevAddressStreetNumber: 'prevAddressStreetNumber',
      _prevAddressLine: '_prevAddressLine',
    },
  },
  [PersonTypeEnum.Guarantor]: {
    detailsForm: {
      email: 'Guarantor-email',
      salutation: 'MR',
      firstName: 'First Name',
      lastName: 'Last Name',
    },
    _identifyForm: {
      typeOfIdentification: 'typeOfIdentification',
      identificationNumber: 'identificationNumber',
      identificationPlaceOfIssue: 'identificationPlaceOfIssue',
      identificationDateOfIssue: new Date(2023, 2, 1),
      identificationDateOfExpiry: new Date(2023, 2, 1),
      identificationIssuingAuthority: 'identificationIssuingAuthority',
      personalDateOfBirth: new Date(2023, 2, 1),
      personalNationality: 'personalNationality',
      personalPlaceOfBirth: 'personalPlaceOfBirth',
      personalBirthName: 'personalBirthName',
      _idPassed: true,
      _docsMarkAsUploaded: false,
      _docsOtherType: 'registrationCertificate',
    },
    addressForm: {
      city: 'city',
      country: 'country',
      email: 'email',
      firstName: 'firstName',
      fullAddress: 'fullAddress',
      lastName: 'lastName',
      salutation: 'salutation',
      street: 'street',
      streetName: 'streetName',
      streetNumber: 'streetNumber',
    },
    employmentForm: {
      employer: 'employer',
      employedSince: new Date(2023, 2, 1),
      _isTemporaryUntil: true,
      temporaryEmployedUntil: new Date(2023, 2, 1),
    },
    incomeForm: {
      netIncome: 100,
      partnerIncomeNet: 100,
      otherIncomeFromHousehold: 100,
      typeOfResident: 100,
      incomeFromRent: 100,
      housingCosts: 100,
      supportPayment: 100,
      incomeInfo: 'test',
    },
    bankForm: {
      bankIBAN: 'bankIBAN',
      bankBIC: 'bankBIC',
    },
    protectionForm: {
      _yes: true,
      _no: false,
      creditProtectionInsurance: true,
    },
    personalForm: {
      personalMaritalStatus: 'personalMaritalStatus',
      profession: 'profession',
      addressMobilePhoneNumber: 'addressMobilePhoneNumber',
      addressPhoneNumber: 'addressPhoneNumber',
      addressResidentSince: new Date(2023, 2, 1),
      numberOfChildren: 100,
      typeOfIdentification: 'typeOfIdentification',
      identificationNumber: 'identificationNumber',
      identificationPlaceOfIssue: 'identificationPlaceOfIssue',
      identificationDateOfIssue: new Date(2023, 2, 1),
      identificationDateOfExpiry: new Date(2023, 2, 1),
      identificationIssuingAuthority: 'identificationIssuingAuthority',
      personalDateOfBirth: new Date(2023, 2, 1),
      personalNationality: 'personalNationality',
      personalPlaceOfBirth: 'personalPlaceOfBirth',
      personalBirthName: 'personalBirthName',
      _idPassed: true,
      _docsMarkAsUploaded: false,
      _docsOtherType: 'registrationCertificate',
    },
    prevAddressForm: {
      prevAddressResidentSince: new Date(2023, 0, 0),
      prevAddressCountry: 'prevAddressCountry',
      prevAddressCity: 'prevAddressCity',
      prevAddressZip: 'prevAddressZip',
      prevAddressStreet: 'prevAddressStreet',
      prevAddressStreetNumber: 'prevAddressStreetNumber',
      _prevAddressLine: '_prevAddressLine',
    },
  },
});
